name: selfdrive

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && github.run_id || github.head_ref || github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  PYTHONWARNINGS: error
  BASE_IMAGE: openpilot-base
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}

  DOCKER_LOGIN: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  BUILD: selfdrive/test/docker_build.sh base

  RUN: docker run --shm-size 1G -w /tmp/openpilot -e CI=1 -e PRE_COMMIT_HOME=/tmp/pre-commit -e PYTHONWARNINGS="ignore::DeprecationWarning" -e FILEREADER_CACHE=1 -e PYTHONPATH=/tmp/openpilot -e NUM_JOBS -e JOB_ID -e GITHUB_ACTION -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_RUN_ID -v $GITHUB_WORKSPACE/.ci_cache/pre-commit:/tmp/pre-commit -v $GITHUB_WORKSPACE/.ci_cache/scons_cache:/tmp/scons_cache -v $GITHUB_WORKSPACE/.ci_cache/comma_download_cache:/tmp/comma_download_cache -v $GITHUB_WORKSPACE/.ci_cache/openpilot_cache:/tmp/openpilot_cache -v $PWD/common:/tmp/openpilot/common -v $PWD/selfdrive/athena:/tmp/openpilot/selfdrive/athena -v $PWD/selfdrive/boardd:/tmp/openpilot/selfdrive/boardd -v $PWD/selfdrive/car:/tmp/openpilot/selfdrive/car -v $PWD/selfdrive/controls:/tmp/openpilot/selfdrive/controls -v $PWD/selfdrive/locationd:/tmp/openpilot/selfdrive/locationd -v $PWD/selfdrive/monitoring:/tmp/openpilot/selfdrive/monitoring -v $PWD/selfdrive/navd/tests:/tmp/openpilot/selfdrive/navd/tests -v $PWD/selfdrive/thermald:/tmp/openpilot/selfdrive/thermald -v $PWD/selfdrive/test/longitudinal_maneuvers:/tmp/openpilot/selfdrive/test/longitudinal_maneuvers -v $PWD/selfdrive/test/process_replay/test_fuzzy.py:/tmp/openpilot/selfdrive/test/process_replay/test_fuzzy.py -v $PWD/system/camerad:/tmp/openpilot/system/camerad -v $PWD/system/hardware/tici:/tmp/openpilot/system/hardware/tici -v $PWD/system/loggerd:/tmp/openpilot/system/loggerd -v $PWD/system/proclogd:/tmp/openpilot/system/proclogd -v $PWD/system/tests:/tmp/openpilot/system/tests -v $PWD/system/ubloxd:/tmp/openpilot/system/ubloxd -v $PWD/system/webrtc:/tmp/openpilot/system/webrtc -v $PWD/tools/lib/tests:/tmp/openpilot/tools/lib/tests -v $PWD/tools/replay:/tmp/openpilot/tools/replay -v $PWD/tools/cabana:/tmp/openpilot/tools/cabana --env DISPLAY=:99 --volume /tmp/.X11-unix:/tmp/.X11-unix ghcr.io/knownotunknown/openpilot:latest /bin/bash -c



  PYTEST: pytest --continue-on-collection-errors --cov --cov-report=xml --cov-append --durations=0 --durations-min=5 --hypothesis-seed 0 -n logical

  IMAGE_NAME: openpilot
  IMAGE_TAG: latest  # Tag for the Docker image
  REGISTRY: ghcr.io/${{ github.repository_owner }}  # GitHub Container Registry
  REBUILD_IMAGE: true


jobs:
  unit_tests:
    name: unit tests
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') ||
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/checkout@v2
    - name: Git LFS Pull
      run: git lfs pull
      shell: bash

    - name: Check package sizes
      run: |
        sudo apt-get install --dry-run autoconf build-essential ca-certificates casync clang cmake make cppcheck libtool gcc-arm-none-eabi bzip2 liblzma-dev libarchive-dev libbz2-dev capnproto libcapnp-dev curl libcurl4-openssl-dev git git-lfs ffmpeg libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libavfilter-dev libeigen3-dev libffi-dev libglew-dev libgles2-mesa-dev libglfw3-dev libglib2.0-0 libncurses5-dev libncursesw5-dev libomp-dev libopencv-dev libpng16-16 libportaudio2 libssl-dev libsqlite3-dev libusb-1.0-0-dev libzmq3-dev libsystemd-dev locales opencl-headers ocl-icd-libopencl1 ocl-icd-opencl-dev clinfo portaudio19-dev qml-module-qtquick2 qtmultimedia5-dev qtlocation5-dev qtpositioning5-dev qttools5-dev-tools libqt5sql5-sqlite libqt5svg5-dev libqt5charts5-dev libqt5serialbus5-dev  libqt5x11extras5-dev libreadline-dev libdw1 valgrind libavresample-dev qt5-default python-dev 2>&1 | awk '/After this operation, / {print}'
      shell: bash

      # build cache
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}
    # as suggested here: https://github.com/moby/moby/issues/32816#issuecomment-910030001
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions to ensure a consistent docker build cache
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;

    # - uses: ./.github/workflows/setup-with-retry
    #   with:
    #     docker_hub_pat: ${{ secrets.DOCKER_HUB_PAT }}

    # - name: Build openpilot
    #   timeout-minutes: ${{ ((steps.restore-scons-cache.outputs.cache-hit == 'true') && 10 || 30) }} # allow more time when we missed the scons cache
    #   run: ${{ env.RUN }} "scons -j$(nproc)"
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: xhost x11-xserver-utils
        version: 1.0

    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      shell: bash

    - name: Pull existing Docker image
      id: docker_pull
      if: ${{ env.REBUILD_IMAGE != 'true' }}
      run: |
        if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}; then
          echo "docker_pull_success=true" >> $GITHUB_ENV
        else
          echo "docker_pull_success=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build Docker Image using cache
      if: env.docker_pull_success == 'false' || ${{ env.REBUILD_IMAGE != 'true' }}
      run: |
        docker build --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f Dockerfile.openpilot_base -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      shell: bash

    # - name: Push Docker Image
    #   if: env.docker_pull_success == 'false' || ${{ env.REBUILD_IMAGE != 'true' }}
    #   run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    #   shell: bash

    - name: Print Docker Image Size
      run: |
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --format "{{.Size}}"

    - name: Run unit tests
      timeout-minutes: 15
      run: |
        source selfdrive/test/setup_xvfb.sh && \
        ${{ env.RUN }} "export MAPBOX_TOKEN='pk.eyJ1Ijoiam5ld2IiLCJhIjoiY2xxNW8zZXprMGw1ZzJwbzZneHd2NHljbSJ9.gV7VPRfbXFetD-1OVF0XZg' && \
                        /usr/local/bin/python3.11 -m $PYTEST --timeout 60 -m 'not slow' && \
                        ./selfdrive/ui/tests/create_test_translations.sh && \
                        QT_QPA_PLATFORM=offscreen ./selfdrive/ui/tests/test_translations && \
                        ./selfdrive/ui/tests/test_translations.py"
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

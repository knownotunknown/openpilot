name: selfdrive

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && github.run_id || github.head_ref || github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  PYTHONWARNINGS: ignore
  BASE_IMAGE: openpilot-base
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}

  DOCKER_LOGIN: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  BUILD: selfdrive/test/docker_build.sh base

  RUN: docker run --shm-size 1G -v $PWD:/tmp/openpilot -w /tmp/openpilot -e CI=1 -e PRE_COMMIT_HOME=/tmp/pre-commit -e PYTHONWARNINGS=error -e FILEREADER_CACHE=1 -e PYTHONPATH=/tmp/openpilot -e NUM_JOBS -e JOB_ID -e GITHUB_ACTION -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_RUN_ID -v $GITHUB_WORKSPACE/.ci_cache/pre-commit:/tmp/pre-commit -v $GITHUB_WORKSPACE/.ci_cache/scons_cache:/tmp/scons_cache -v $GITHUB_WORKSPACE/.ci_cache/comma_download_cache:/tmp/comma_download_cache -v $GITHUB_WORKSPACE/.ci_cache/openpilot_cache:/tmp/openpilot_cache knownotunknown/openpilot_base:latest /bin/bash -c

  PYTEST: pytest --continue-on-collection-errors --cov --cov-report=xml --cov-append --durations=0 --durations-min=5 --hypothesis-seed 0 -n logical

  IMAGE_NAME: openpilot
  IMAGE_TAG: latest  # Tag for the Docker image
  REGISTRY: ghcr.io/${{ github.repository_owner }}  # GitHub Container Registry

  GITLAB_REGISTRY: registry.gitlab.com/${{ secrets.GITLAB_USERNAME }}/openpilot_ci
  GITLAB_USERNAME: ${{ secrets.GITLAB_USERNAME }}
  GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}

  REBUILD_IMAGE: false




jobs:
  unit_tests:
    name: unit tests
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') ||
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/checkout@v2
    - name: Git LFS Pull
      run: git lfs pull
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.ubuntu
        push: false
        tags: user/app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Check package sizes
      run: |
        sudo apt-get install --dry-run autoconf build-essential ca-certificates casync clang cmake make cppcheck libtool gcc-arm-none-eabi bzip2 liblzma-dev libarchive-dev libbz2-dev capnproto libcapnp-dev curl libcurl4-openssl-dev git git-lfs ffmpeg libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libavfilter-dev libeigen3-dev libffi-dev libglew-dev libgles2-mesa-dev libglfw3-dev libglib2.0-0 libncurses5-dev libncursesw5-dev libomp-dev libopencv-dev libpng16-16 libportaudio2 libssl-dev libsqlite3-dev libusb-1.0-0-dev libzmq3-dev libsystemd-dev locales opencl-headers ocl-icd-libopencl1 ocl-icd-opencl-dev clinfo portaudio19-dev qml-module-qtquick2 qtmultimedia5-dev qtlocation5-dev qtpositioning5-dev qttools5-dev-tools libqt5sql5-sqlite libqt5svg5-dev libqt5charts5-dev libqt5serialbus5-dev  libqt5x11extras5-dev libreadline-dev libdw1 valgrind libavresample-dev qt5-default python-dev 2>&1 | awk '/After this operation, / {print}'
      shell: bash

      # build cache
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}
    # as suggested here: https://github.com/moby/moby/issues/32816#issuecomment-910030001
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions to ensure a consistent docker build cache
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;

    # - uses: ./.github/workflows/setup-with-retry
    #   with:
    #     docker_hub_pat: ${{ secrets.DOCKER_HUB_PAT }}

    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: build-essential autoconf portaudio19-dev libssl-dev libzmq3-dev alien
        version: 1.0

    - id: cache-python-dep
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/.venv
        key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock')}}
    - id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION}}
    - id: cache-poetry-package
      uses: actions/cache@v3
      with:
        path: ${{ env.Python3_ROOT_DIR }}/lib/python3.11/site-packages
        key: poetry-pip-${{ env.PYTHON_VERSION }}
    - id: poetry-setup
      shell: bash
      if: steps.cache-poetry-package.outputs.cache-hit != 'true'
      run: pip install poetry==1.6.1
    - id: pre-poetry-install
      shell: bash
      if: steps.cache-python-dep.outputs.cache-hit != true
      run: rm -rf ~/.cache/virtualenvs/*
    - id: poetry-install
      shell: bash
      run: |
          python -m poetry config virtualenvs.in-project true
          echo "PYTHONPATH=${{ github.workspace }}" > ${{ github.workspace }}/.env
          python -m poetry self add poetry-dotenv-plugin@^0.1.0
          python -m poetry install --no-root
    - id: restore-scons-cache
      uses: actions/cache@v3
      with:
        path: /tmp/scons_cache
        key: ${{ inputs.cache_key_prefix }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          ${{ inputs.cache_key_prefix }}-${{ env.CACHE_COMMIT_DATE }}-
          ${{ inputs.cache_key_prefix }}-

    # - name: Testing out Docker Compose
    #   run: docker compose up --build
    #   shell: bash

    - name: Login to Docker Hub
      run: echo ${{ secrets.KNOWNOTUNKNOWN_DOCKER_HUB_PAT }} | docker login -u ${{ secrets.KNOWNOTUNKNOWN_DOCKER_HUB_USERNAME }} --password-stdin
      shell: bash

    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      shell: bash

    - name: Login to GitLab Container Registry
      run: echo ${{ secrets.GITLAB_TOKEN }} | docker login ${{ env.GITLAB_REGISTRY }} -u ${{ secrets.GITLAB_USERNAME }} --password-stdin
      shell: bash

    - name: Build Docker Image
      if: env.REBUILD_IMAGE == 'true'
      run: |
        docker build -f Dockerfile.ubuntu -t openpilot_ubuntu .
        docker build -f Dockerfile.python -t openpilot_python .
      shell: bash

    - name: Push to Docker Hub
      if: env.REBUILD_IMAGE == 'true'
      run: |
        docker tag openpilot_ubuntu knownotunknown/openpilot_ubuntu:latest
        docker tag openpilot_python knownotunknown/openpilot_python:latest
        docker push knownotunknown/openpilot_ubuntu:latest
        docker push knownotunknown/openpilot_python:latest
      shell: bash

    - name: Push to GitLab Container Registry
      if: env.REBUILD_IMAGE == 'true'
      run: |
        docker tag openpilot_ubuntu registry.gitlab.com/openpilot_ci/speedup/openpilot_ubuntu-latest
        docker tag openpilot_python registry.gitlab.com/openpilot_ci/speedup/openpilot_python-latest
        docker push registry.gitlab.com/openpilot_ci/speedup/openpilot_ubuntu-latest
        docker push registry.gitlab.com/openpilot_ci/speedup/openpilot_python-latest
      shell: bash

    # - name: Pull from Docker Hub with docker-compose
    #   if: env.REBUILD_IMAGE == 'false'
    #   run: |
    #     docker pull knownotunknown/openpilot_python:latest
    #   shell: bash

    - name: Pull from GitLab Container Registry
      if: env.REBUILD_IMAGE == 'false'
      run: |
        docker pull registry.gitlab.com/openpilot_ci/speedup/openpilot_ubuntu-latest & docker pull registry.gitlab.com/openpilot_ci/speedup/openpilot_python-latest
      shell: bash

    # - name: Build openpilot
    #   timeout-minutes: ${{ ((steps.restore-scons-cache.outputs.cache-hit == 'true') && 10 || 30) }} # allow more time when we missed the scons cache
    #   run: docker-compose exec ubuntu sh -c "scons -j$(nproc)"

    # - name: Run unit tests
    #   timeout-minutes: 15
    #   run: |
    #     docker-compose exec ubuntu sh -c "source selfdrive/test/setup_xvfb.sh && \
    #                     export MAPBOX_TOKEN='pk.eyJ1Ijoiam5ld2IiLCJhIjoiY2xxNW8zZXprMGw1ZzJwbzZneHd2NHljbSJ9.gV7VPRfbXFetD-1OVF0XZg' && \
    #                     $PYTEST --timeout 60 -m 'not slow' && \
    #                     ./selfdrive/ui/tests/create_test_translations.sh && \
    #                     QT_QPA_PLATFORM=offscreen ./selfdrive/ui/tests/test_translations && \
    #                     ./selfdrive/ui/tests/test_translations.py"

    # - name: "Upload coverage to Codecov"
    #   uses: codecov/codecov-action@v3
    #   with:
    #     name: ${{ github.job }}
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
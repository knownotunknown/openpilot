name: selfdrive

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && github.run_id || github.head_ref || github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  PYTHONWARNINGS: ignore:DeprecationWarning
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}
  PYTEST: pytest --continue-on-collection-errors --cov --cov-report=xml --cov-append --durations=0 --durations-min=5 --hypothesis-seed 0 -n logical

jobs:
  build_release:
    name: build release
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"      
      shell: bash
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Build openpilot and run checks
      run: python selfdrive/manager/build.py
      shell: bash
      working-directory: ${{ github.workspace }}

  build:
    strategy:
      matrix:
        arch: ${{ fromJson(
           ((github.repository == 'commaai/openpilot') &&
              ((github.event_name != 'pull_request') || 
               (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && '["x86_64", "aarch64"]' || '["x86_64"]' ) }}
    runs-on: ${{ (matrix.arch == 'aarch64') && 'namespace-profile-arm64-2x8' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - uses: ./.github/workflows/compile-openpilot
      timeout-minutes: ${{ ((steps.restore-scons-cache.outputs.cache-hit == 'true') && 15 || 30) }} # allow more time when we missed the scons cache

  static_analysis:
    name: static analysis
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') || 
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: ./.github/workflows/setup-pre-commit
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: pre-commit
      timeout-minutes: 4
      run: |
        unset PYTHONWARNINGS
        pre-commit run --all
        chmod -R 777 /tmp/pre-commit
      shell: bash

  valgrind:
    name: valgrind
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
      shell: bash
    - name: Build openpilot
      run: scons -j$(nproc)
      shell: bash
    - name: Run valgrind
      timeout-minutes: 1
      run: python selfdrive/test/test_valgrind_replay.py
      shell: bash
    - name: Print logs
      if: always()
      run: cat selfdrive/test/valgrind_logs.txt
      shell: bash

  unit_tests:
    name: unit tests
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') || 
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Git LFS
      run: |
        git lfs install
        git lfs pull
      shell: bash

    - name: Install Qt and other dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default
      shell: bash

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          casync \
          clang \
          cmake \
          cppcheck \
          gcc-arm-none-eabi \
          libarchive-dev \
          capnproto \
          libcapnp-dev \
          libcurl4-openssl-dev \
          ffmpeg \
          libavformat-dev \
          libavcodec-dev \
          libavdevice-dev \
          libavutil-dev \
          libavfilter-dev \
          libeigen3-dev \
          libglew-dev \
          libgles2-mesa-dev \
          libglfw3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libomp-dev \
          libopencv-dev \
          libportaudio2 \
          libssl-dev \
          libusb-1.0-0-dev \
          libzmq3-dev \
          libsystemd-dev \
          opencl-headers \
          ocl-icd-libopencl1 \
          clinfo \
          portaudio19-dev \
          qml-module-qtquick2 \
          qtmultimedia5-dev \
          qtlocation5-dev \
          qtpositioning5-dev \
          qttools5-dev-tools \
          libqt5svg5-dev \
          libqt5charts5-dev \
          libqt5serialbus5-dev \
          libqt5x11extras5-dev \
          valgrind \
          libavresample-dev \
          python-dev \
          intel-opencl-icd \
          ocl-icd-opencl-dev \
          x11-xserver-utils
      shell: bash

    - name: Cache Python Environment
      uses: actions/cache@v3
      if: always()
      with:
        path: ~/sconsvenv
        key: ${{ runner.os }}-sconsvenv-${{ hashFiles('.github/workflows/setup/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-sconsvenv-

    - name: Setup Python Environment and Install Python Dependencies
      run: |
        VENV_PATH="$HOME/sconsvenv"
        if [ -d "$VENV_PATH" ]; then
          echo "Cache hit, skipping environment setup."
        else
          python -m venv "$VENV_PATH"
          source "$VENV_PATH/bin/activate"
          python -m pip install --upgrade pip
          pip install -r .github/workflows/setup/requirements.txt
          pip install numpy scons pycryptodome Cython  # Adding Cython here to ensure cythonize is available
        fi
        source "$VENV_PATH/bin/activate"  # Ensure the virtual environment is activated
        pip install scons  # Ensure scons is installed in the virtual environment
        echo "SCons version:"
        "$VENV_PATH/bin/scons" --version  # Use the absolute path
      shell: bash

    - name: Debugging Environment
      run: |
        VENV_PATH="$HOME/sconsvenv"
        source "$VENV_PATH/bin/activate"
        echo "Listing installed Python packages:"
        pip list
        echo "Python executable path:"
        which python
        echo "Python version:"
        python --version
        echo "QMake version:"
        qmake --version
        echo "ARM GCC version:"
        arm-none-eabi-gcc --version
        echo "Listing Cap'n Proto Headers:"
        ls -l /usr/include/capnp/
      shell: bash

    - name: Verify libOpenCL.so presence
      run: |
        if ! find /usr -name libOpenCL.so; then
          echo "libOpenCL.so not found, attempting to locate libOpenCL.so.1..."
          if libpath=$(find /usr -name libOpenCL.so.1); then
            echo "libOpenCL.so.1 found at $libpath"
            echo "Creating a symlink for libOpenCL.so"
            sudo ln -s $libpath ${libpath%.1}
          else
            echo "libOpenCL.so.1 also not found. Please ensure OpenCL runtime is properly installed."
            exit 1
          fi
        else
          echo "libOpenCL.so found."
        fi
      shell: bash

    - name: Build openpilot
      timeout-minutes: ${{ ((steps.restore-scons-cache.outputs.cache-hit == 'true') && 10 || 30) }} # allow more time when we missed the scons cache
      run: |
        VENV_PATH="$HOME/sconsvenv"
        source "$VENV_PATH/bin/activate"
        export PYTHONPATH=$PYTHONPATH:$(python -c "import site; print(site.getsitepackages()[0])")
        scons -j$(nproc)
      shell: bash
    - name: Run unit tests
      timeout-minutes: 15
      run: |
        VENV_PATH="$HOME/sconsvenv"
        source "$VENV_PATH/bin/activate"
        source selfdrive/test/setup_xvfb.sh
        pytest --timeout 60 -m 'not slow'
      shell: bash
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        

  process_replay:
    name: process replay
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') || 
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Cache test routes
      id: dependency-cache
      uses: actions/cache@v3
      with:
        path: .ci_cache/comma_download_cache
        key: proc-replay-${{ hashFiles('.github/workflows/selfdrive_tests.yaml', 'selfdrive/test/process_replay/ref_commit') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
      shell: bash
    - name: Build openpilot
      run: |
        scons -j$(nproc)
      shell: bash
    - name: Run replay
      timeout-minutes: 30
      run: |
        coverage run selfdrive/test/process_replay/test_processes.py -j$(nproc)
        chmod -R 777 /tmp/comma_download_cache
        coverage combine
        coverage xml
      shell: bash
    - name: Print diff
      id: print-diff
      if: always()
      run: cat selfdrive/test/process_replay/diff.txt
      shell: bash
    - uses: actions/upload-artifact@v3
      if: always()
      continue-on-error: true
      with:
        name: process_replay_diff.txt
        path: selfdrive/test/process_replay/diff.txt
    - name: Upload reference logs
      if: ${{ failure() && steps.print-diff.outcome == 'success' && github.repository == 'commaai/openpilot' && env.AZURE_TOKEN != '' }}
      run: |
        unset PYTHONWARNINGS
        AZURE_TOKEN='${{ env.AZURE_TOKEN }}' python selfdrive/test/process_replay/test_processes.py -j$(nproc) --upload-only
      shell: bash
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  regen:
    name: regen
    runs-on: 'ubuntu-20.04'
    steps: 
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Cache test routes
      id: dependency-cache
      uses: actions/cache@v3
      with:
        path: .ci_cache/comma_download_cache
        key: regen-${{ hashFiles('.github/workflows/selfdrive_tests.yaml', 'selfdrive/test/process_replay/test_regen.py') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
      shell: bash
    - name: Build openpilot
      run: |
        scons -j$(nproc)
      shell: bash
    - name: Run regen
      timeout-minutes: 30
      run: |
        export ONNXCPU=1
        $PYTEST selfdrive/test/process_replay/test_regen.py
        chmod -R 777 /tmp/comma_download_cache
      shell: bash

  test_modeld:
    name: model tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
      shell: bash
    - name: Build openpilot
      run: |
        scons -j$(nproc)
      shell: bash
    # PYTHONWARNINGS triggers a SyntaxError in onnxruntime
    - name: Run model replay with ONNX
      timeout-minutes: 4
      run: |
        unset PYTHONWARNINGS
        ONNXCPU=1 NO_NAV=1 coverage run selfdrive/test/process_replay/model_replay.py
        coverage combine
        coverage xml
      shell: bash
    - name: Run unit tests
      timeout-minutes: 4
      run: |
        unset PYTHONWARNINGS
        $PYTEST selfdrive/modeld
      shell: bash
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test_cars:
    name: cars
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') || 
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    strategy:
      fail-fast: false
      matrix:
        job: [0, 1, 2, 3, 4]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        cache: 'pip'
    - name: Install dependencies
      run: |
        start=`date +%s`
        pip install -r .github/workflows/setup/requirements.txt
        end=`date +%s`
        runtime=$((end-start))
        echo "Installing dependencies $runtime seconds"     
    - uses: ./.github/workflows/setup-with-retry
    - name: Install scons
      run: sudo apt-get install -y scons
      shell: bash
    - name: Cache test routes
      id: dependency-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/comma_download_cache
        key: car_models-${{ hashFiles('selfdrive/car/tests/test_models.py', 'selfdrive/car/tests/routes.py') }}-${{ matrix.job }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
      shell: bash
    - name: Build openpilot
      run: scons -j$(nproc)
      shell: bash
    - name: Test car models
      timeout-minutes: 10
      run: |
        $PYTEST selfdrive/car/tests/test_models.py
        chmod -R 777 /tmp/comma_download_cache
      shell: bash
      env:
        NUM_JOBS: 5
        JOB_ID: ${{ matrix.job }}
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}-${{ matrix.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  car_docs_diff:
    name: PR comments
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.event.pull_request.base.ref }}
      - run: git lfs pull
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Install dependencies
        run: |
          start=`date +%s`
          pip install -r .github/workflows/setup/requirements.txt
          end=`date +%s`
          runtime=$((end-start))
          echo "Installing dependencies $runtime seconds"     
      - uses: ./.github/workflows/setup-with-retry
      - name: Install scons
        run: sudo apt-get install -y scons
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy
        shell: bash
      - name: Get base car info
        run: |
          scons -j$(nproc)
          python selfdrive/debug/dump_car_info.py --path /tmp/openpilot_cache/base_car_info
          sudo chown -R $USER:$USER ${{ github.workspace }}
        shell: bash
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: current
      - run: cd current && git lfs pull
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy
        shell: bash
      - name: Save car docs diff
        id: save_diff
        run: |
          cd current
          scons -j$(nproc)
          output=$(python selfdrive/debug/print_docs_diff.py --path /tmp/openpilot_cache/base_car_info)
          output="${output//$'\n'/'%0A'}"
          echo "::set-output name=diff::$output"
        shell: bash
      - name: Find comment
        if: ${{ env.AZURE_TOKEN != '' }}
        uses: peter-evans/find-comment@1769778a0c5bd330272d749d12c036d65e70d39d
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: This PR makes changes to
      - name: Update comment
        if: ${{ steps.save_diff.outputs.diff != '' && env.AZURE_TOKEN != '' }}
        uses: peter-evans/create-or-update-comment@b95e16d2859ad843a14218d1028da5b2c4cbc4b4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "${{ steps.save_diff.outputs.diff }}"
          edit-mode: replace
      - name: Delete comment
        if: ${{ steps.fc.outputs.comment-id != '' && steps.save_diff.outputs.diff == '' && env.AZURE_TOKEN != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }}
            })

  create_ui_report:
    name: Create UI Report
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - run: pip install -r requirements.txt 
      - uses: ./.github/workflows/setup-with-retry
      - name: Install scons
        run: sudo apt-get install -y scons
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy
        shell: bash
      - name: Build openpilot
        run: scons -j$(nproc)
        shell: bash
      - name: Create Test Report
        run: |
          PYTHONWARNINGS=ignore
          source selfdrive/test/setup_xvfb.sh
          export MAPBOX_TOKEN='pk.eyJ1Ijoiam5ld2IiLCJhIjoiY2xxNW8zZXprMGw1ZzJwbzZneHd2NHljbSJ9.gV7VPRfbXFetD-1OVF0XZg'
          python selfdrive/ui/tests/test_ui/run.py
        shell: bash
      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: selfdrive/ui/tests/test_ui/report

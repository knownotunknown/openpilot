name: selfdrive

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && github.run_id || github.head_ref || github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  PYTHONWARNINGS: error
  BASE_IMAGE: openpilot
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}

  DOCKER_LOGIN: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  BUILD: selfdrive/test/docker_build.sh base

  RUN: docker run --rm -e PYTHONWARNINGS="ignore::DeprecationWarning" -w /tmp/openpilot -e CI=1 -e PRE_COMMIT_HOME=/tmp/pre-commit -e FILEREADER_CACHE=1 -e PYTHONPATH=/tmp/openpilot -e NUM_JOBS -e JOB_ID -e GITHUB_ACTION -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_RUN_ID -v $GITHUB_WORKSPACE/.ci_cache/pre-commit:/tmp/pre-commit -v $GITHUB_WORKSPACE/.ci_cache/scons_cache:/tmp/scons_cache -v $GITHUB_WORKSPACE/.ci_cache/comma_download_cache:/tmp/comma_download_cache -v $GITHUB_WORKSPACE/.ci_cache/openpilot_cache:/tmp/openpilot_cache --env DISPLAY=:99 --volume /tmp/.X11-unix:/tmp/.X11-unix openpilot /bin/bash -c




  PYTEST: pytest --continue-on-collection-errors --cov --cov-report=xml --cov-append --durations=0 --durations-min=5 --hypothesis-seed 0 -n logical

jobs:
  unit_tests:
    name: unit tests
    runs-on: ${{ ((github.repository == 'commaai/openpilot') &&
                   ((github.event_name != 'pull_request') ||
                    (github.event.pull_request.head.repo.full_name == 'commaai/openpilot'))) && 'namespace-profile-amd64-8x16' || 'ubuntu-20.04' }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    # - uses: ./.github/workflows/setup-with-retry
    #   with:
    #     docker_hub_pat: ${{ secrets.DOCKER_HUB_PAT }}
        # do this after checkout to ensure our custom LFS config is used to pull from GitLab
    - shell: bash
      run: git lfs pull

    # on BuildJet runners, must be logged into DockerHub to avoid rate limiting
    # https://buildjet.com/for-github-actions/docs/guides/docker
    - shell: bash
      if: ${{ contains(runner.name, 'buildjet') && inputs.docker_hub_pat == '' }}
      run: |
        echo "Need to set the Docker Hub PAT secret as an input to this action"
        exit 1
    - name: Login to Docker Hub
      if: contains(runner.name, 'buildjet')
      shell: bash
      run: |
        docker login -u adeebshihadeh -p ${{ inputs.docker_hub_pat }}

    # - name: Build Docker image
    #   run: docker build -f Dockerfile.openpilot_base . -t my_openpilot_image
    #   shell: bash
    # build cache
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}
    # as suggested here: https://github.com/moby/moby/issues/32816#issuecomment-910030001
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions to ensure a consistent docker build cache
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;

    - name: Build Docker Image
      run: |
        docker build -f Dockerfile.openpilot -t openpilot .

    - name: Print Docker Image Size
      run: |
        docker images openpilot --format "{{.Size}}"

    - name: Debugging test environment
      run: |
        docker run --rm -w /tmp/openpilot openpilot /bin/bash -c " \
        echo 'Current Working Directory:' && pwd && \
        echo 'Directory Contents:' && ls -la"

    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: xhost x11-xserver-utils
        version: 1.0

    # - name: Build openpilot
    #   timeout-minutes: ${{ ((steps.restore-scons-cache.outputs.cache-hit == 'true') && 10 || 30) }} # allow more time when we missed the scons cache
    #   run: ${{ env.RUN }} "scons -j$(nproc)"
    #   shell: bash

    - name: List Installed Python Dependencies
      run: |
        ${{ env.RUN }} "/tmp/openpilot/.venv/bin/python -m pip freeze"
      shell: bash

    - name: Run unit tests
      timeout-minutes: 15
      run: |
        source selfdrive/test/setup_xvfb.sh &&
        ${{ env.RUN }} "
          . /tmp/openpilot/.venv/bin/activate &&
          export MAPBOX_TOKEN='pk.eyJ1Ijoiam5ld2IiLCJhIjoiY2xxNW8zZXprMGw1ZzJwbzZneHd2NHljbSJ9.gV7VPRfbXFetD-1OVF0XZg' &&
          pytest --timeout 60 -m 'not slow' &&
          ./selfdrive/ui/tests/create_test_translations.sh &&
          QT_QPA_PLATFORM=offscreen ./selfdrive/ui/tests/test_translations &&
          ./selfdrive/ui/tests/test_translations.py"

    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        name: ${{ github.job }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

name: OpenPilot Environment Setup

on: [push, pull_request, work_dispatch]  # Trigger on push and pull request events, adjust as necessary

env:
  PYTHONWARNINGS: error
  IMAGE_NAME: openpilot-env  # Name of the Docker image
  IMAGE_TAG: latest  # Tag for the Docker image
  REGISTRY: ghcr.io/${{ github.repository_owner }}  # GitHub Container Registry
  AZURE_TOKEN: ${{ secrets.AZURE_COMMADATACI_OPENPILOTCI_TOKEN }}

jobs:
  setup-environment:
    runs-on: ubuntu-latest  # Choose the runner, adjust as necessary

    steps:
    - uses: actions/checkout@v2
    - name: Git LFS Pull
      run: git lfs pull
      shell: bash

    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      shell: bash

    - name: Set Cache Commit Date
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
      shell: bash

    - name: Cache SCons
      uses: actions/cache@v2
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.os }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.os }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.os }}

    - name: Normalize file permissions
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;
      shell: bash

    - name: Login to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      shell: bash

    - name: Pull existing Docker image
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true
      shell: bash

    - name: Build Docker Image using cache
      run: |
        docker build --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f Dockerfile.openpilot_base -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
      shell: bash

    - name: Push Docker Image
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      shell: bash

    # - name: Determine if Docker Image needs to be pushed
    #   id: docker_push
    #   run: |
    #     if [ "${{ github.event_name }}" == "push" ] && [ -n "$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep Dockerfile)" ]; then
    #       echo "::set-output name=push::true"
    #     else
    #       echo "::set-output name=push::false"
    #     fi
    #   shell: bash
    #      if: steps.docker_push.outputs.push == 'true'


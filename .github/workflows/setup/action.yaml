name: 'openpilot env setup'

env:

inputs:
  sleep_time:
    description: 'Time to sleep between retries'
    required: false
    default: '30'

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Echo confirmation
      run: |
        start=$(date +%s)
        echo "Starting openpilot environment setup..."
        end=$(date +%s)
        runtime=$((end-start))
        echo "ECHO_CONFIRMATION_RUNTIME=$runtime" >> $GITHUB_ENV
      shell: bash

    - name: Git LFS Pull
      run: |
        start=$(date +%s)
        git lfs pull || { echo "Git LFS pull failed"; exit 1; }
        end=$(date +%s)
        runtime=$((end-start))
        echo "GIT_LFS_PULL_RUNTIME=$runtime" >> $GITHUB_ENV
      shell: bash


    - name: Install Ubuntu dependencies
      run: |
        start=$(date +%s)
        sudo apt-get update && sudo ./tools/install_ubuntu_dependencies.sh
        end=$(date +%s)
        runtime=$((end-start))
        echo "UBUNTU_DEPS_RUNTIME=$runtime" >> $GITHUB_ENV
      shell: bash

    - name: Install dependencies
      run: |
        sudo apt-get install -y --no-install-recommends sudo tzdata locales ssh pulseaudio xvfb x11-xserver-utils gnome-screenshot apt-utils alien unzip tar curl xz-utils dbus gcc-arm-none-eabi tmux vim lsb-core libx11-6
        sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && sudo locale-gen
      shell: bash

    # Set environment variables
    - name: Set environment variables
      run: |
        echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
        echo "LANGUAGE=en_US:en" >> $GITHUB_ENV
        echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
        echo "NVIDIA_VISIBLE_DEVICES=all" >> $GITHUB_ENV
        echo "NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute" >> $GITHUB_ENV
        echo "QTWEBENGINE_DISABLE_SANDBOX=1" >> $GITHUB_ENV
      shell: bash

    - name: Cache OpenCL Driver
      uses: actions/cache@v3
      with:
        path: /tmp/opencl-driver-intel
        key: opencl-driver-${{ hashFiles('**/INTEL_DRIVER') }}

    - name: Install OpenCL
      run: |
        INTEL_DRIVER=l_opencl_p_18.1.0.015.tgz
        INTEL_DRIVER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/15532
        mkdir -p /tmp/opencl-driver-intel
        cd /tmp/opencl-driver-intel
        curl -O $INTEL_DRIVER_URL/$INTEL_DRIVER
        tar -xzf $INTEL_DRIVER
        for i in $(basename $INTEL_DRIVER .tgz)/rpm/*.rpm; do sudo alien --to-deb $i; done
        sudo dpkg -i *.deb
        sudo mkdir -p /etc/OpenCL/vendors
        echo /opt/intel/opencl_compilers_and_libraries_18.1.0.015/linux/compiler/lib/intel64_lin/libintelocl.so | sudo tee /etc/OpenCL/vendors/intel.icd
        cd /
        sudo rm -rf /tmp/opencl-driver-intel
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install Poetry
      run: |
        POETRY_VERSION=1.6.1 curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Cache Poetry virtual environment
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pypoetry/virtualenvs
          ~/.cache/pypoetry/artifacts
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

    - name: Install Python dependencies
      run: |
        start=$(date +%s)
        ./tools/install_python_dependencies.sh
        end=$(date +%s)
        runtime=$((end-start))
        echo "Installing Python dependencies took $runtime seconds" >> $GITHUB_ENV
      shell: bash


    - name: Normalize file permissions
      run: |
        start=$(date +%s)
        set -e
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \; || { echo "Failed to set executable files to 755"; exit 1; }
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \; || { echo "Failed to set non-executable files to 644"; exit 1; }
        end=$(date +%s)
        runtime=$((end-start))
        echo "NORM_FILE_PERMS_RUNTIME=$runtime" >> $GITHUB_ENV
      shell: bash

    - name: Print timings
      run: |
        echo "Echo confirmation runtime: $ECHO_CONFIRMATION_RUNTIME seconds"
        echo "Git LFS Pull runtime: $GIT_LFS_PULL_RUNTIME seconds"
        echo "Ubuntu dependencies installation runtime: $UBUNTU_DEPS_RUNTIME seconds"
        echo "Normalization of file permissions runtime: $NORM_FILE_PERMS_RUNTIME seconds"
        # Add similar echo statements for other timings you have recorded
      shell: bash

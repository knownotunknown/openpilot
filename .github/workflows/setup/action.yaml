name: 'openpilot env setup'

env:
  PYTHONWARNINGS: "ignore:DeprecationWarning"

inputs:
  docker_hub_pat:
    description: 'Auth token for Docker Hub, previously required for BuildJet jobs'
    required: false
    default: ''
  sleep_time:
    description: 'Time to sleep between retries'
    required: false
    default: '30'

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Git LFS Pull
      run: |
        git lfs pull || { echo "Git LFS pull failed"; exit 1; }
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install system dependencies
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y vim net-tools usbutils htop ripgrep tmux wget mesa-utils xvfb libxtst6 libxv1 libglu1-mesa libegl1-mesa libosmesa6 libgl1-mesa-glx libgl1-mesa-dri libgles2-mesa libglapi-mesa libglx-mesa0 libglvnd0 libglx0
      shell: bash

    - name: Print pip version
      run: pip --version
      shell: bash

    - name: Install VirtualGL
      run: |
        set -e
        curl -L -o virtualgl.deb "https://downloads.sourceforge.net/project/virtualgl/$(curl -s https://api.github.com/repos/VirtualGL/virtualgl/releases/latest | grep 'tag_name' | cut -d '"' -f 4)/virtualgl_$(curl -s https://api.github.com/repos/VirtualGL/virtualgl/releases/latest | grep 'tag_name' | cut -d '"' -f 4)_$(dpkg --print-architecture).deb"
        sudo dpkg -i virtualgl.deb
        rm virtualgl.deb
      shell: bash

    - name: Check if pip is in PATH
      run: |
        if ! command -v pip &> /dev/null
        then
          echo "pip could not be found in PATH"
          exit 1
        else
          echo "pip is in PATH"
        fi
      shell: bash

    - name: Check pip compatibility with the current environment
      run: |
        PIP_VERSION=$(pip --version)
        echo "Found pip version: $PIP_VERSION"
        # Add any specific compatibility checks here. This is just an example that always passes.
        echo "Assuming pip is compatible with the current environment"
      shell: bash

    - name: Set up a virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
      shell: bash

    - name: Test pip install functionality
      run: |
        echo "Testing pip install functionality by installing the 'requests' package"
        pip install requests
        # Verify installation
        if ! python -c "import requests" &> /dev/null
        then
          echo "Failed to import 'requests' after installation"
          exit 1
        else
          echo "'requests' installed and imported successfully"
        fi
      shell: bash
    
    - name: Clone IPython repository
      run: git clone https://github.com/ipython/ipython.git
      shell: bash

    - name: Install IPython from source
      run: |
        cd ipython
        pip install -e .
        cd ..
      shell: bash

    - name: Verify installation of ipython
      run: |
        ipython --version
      shell: bash

    - name: Clone Jupyter notebook repository
      run: git clone https://github.com/jupyter/notebook.git
      shell: bash

    - name: Install Jupyter notebook from source
      run: |
        cd notebook
        pip install -e .
        cd ..
      shell: bash

    - name: Verify installation of jupyter-notebook
      run: |
        jupyter-notebook --version
      shell: bash

    - name: Install JupyterLab from source
      run: |
        git clone https://github.com/jupyterlab/jupyterlab.git
        cd jupyterlab
        pip install -e .
      shell: bash

    - name: Normalize file permissions
      run: |
        set -e
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \; || { echo "Failed to set executable files to 755"; exit 1; }
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \; || { echo "Failed to set non-executable files to 644"; exit 1; }
      shell: bash

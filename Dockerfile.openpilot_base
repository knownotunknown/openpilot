ARG OPENPILOT_PATH="/tmp/openpilot"

FROM ubuntu:20.04 as builder

# COPY . /app
# # COPY . /app

# WORKDIR /app
# # WORKDIR /app

ENV PYTHONUNBUFFERED 1

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y --no-install-recommends sudo tzdata locales ssh pulseaudio xvfb x11-xserver-utils gnome-screenshot && \
    rm -rf /var/lib/apt/lists/*

RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

COPY tools/install_ubuntu_dependencies.sh /tmp/tools/
RUN cd /tmp && \
    tools/install_ubuntu_dependencies.sh && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* && \
    # remove unused architectures from gcc for panda
    cd /usr/lib/gcc/arm-none-eabi/9.2.1 && \
    rm -rf arm/ && \
    rm -rf thumb/nofp thumb/v6* thumb/v8* thumb/v7+fp thumb/v7-r+fp.sp

# Add OpenCL
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils \
    alien \
    unzip \
    tar \
    curl \
    xz-utils \
    dbus \
    gcc-arm-none-eabi \
    tmux \
    vim \
    lsb-core \
    libx11-6 \
    wget \
  && rm -rf /var/lib/apt/lists/*

ARG INTEL_DRIVER=l_opencl_p_18.1.0.015.tgz
ARG INTEL_DRIVER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/15532
RUN mkdir -p /tmp/opencl-driver-intel

RUN cd /tmp/opencl-driver-intel && \
    echo INTEL_DRIVER is $INTEL_DRIVER && \
    curl -O $INTEL_DRIVER_URL/$INTEL_DRIVER && \
    tar -xzf $INTEL_DRIVER && \
    for i in $(basename $INTEL_DRIVER .tgz)/rpm/*.rpm; do alien --to-deb $i; done && \
    dpkg -i *.deb && \
    rm -rf $INTEL_DRIVER $(basename $INTEL_DRIVER .tgz) *.deb && \
    mkdir -p /etc/OpenCL/vendors && \
    echo /opt/intel/opencl_compilers_and_libraries_18.1.0.015/linux/compiler/lib/intel64_lin/libintelocl.so > /etc/OpenCL/vendors/intel.icd && \
    cd / && \
    rm -rf /tmp/opencl-driver-intel

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QTWEBENGINE_DISABLE_SANDBOX 1

RUN dbus-uuidgen > /etc/machine-id

# ARG USER=batman
# ARG USER_UID=1000
# RUN useradd -m -s /bin/bash -u $USER_UID $USER
# RUN usermod -aG sudo $USER
# RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
# USER $USER

# ENV POETRY_VIRTUALENVS_CREATE=false
# ENV PYENV_VERSION=3.11.4
# ENV PYENV_ROOT="/home/$USER/pyenv"
# ENV PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH"

COPY pyproject.toml poetry.lock .python-version /tmp/
# COPY tools/install_python_dependencies.sh /tmp/tools/

# RUN cd /tmp && \
#     tools/install_python_dependencies.sh && \
#     rm -rf /tmp/* && \
#     rm -rf /home/$USER/.cache && \
#     find /home/$USER/pyenv -type d -name ".git" | xargs rm -rf && \
#     rm -rf /home/$USER/pyenv/versions/3.11.4/lib/python3.11/test

RUN apt-get update && \
    wget https://www.python.org/ftp/python/3.11.0/Python-3.11.0.tgz && \
    tar -xf Python-3.11.0.tgz && \
    cd Python-3.11.0 && \
    ./configure --enable-optimizations && \
    make -j 8 && \
    make altinstall && \
    cd .. && \
    rm -rf Python-3.11.0.tgz Python-3.11.0 && \
    ln -sf /usr/local/bin/python3.11 /usr/bin/python3 && \
    python3 -m pip install --upgrade --no-cache-dir pip==23.3 && \
    pip install --no-cache-dir poetry==1.6.1 && \
    poetry config virtualenvs.create false && \
    cd /tmp/ && \
    poetry install --only main

USER root
RUN sudo git config --global --add safe.directory /tmp/openpilot

# Use the ARG in the builder stage
ARG OPENPILOT_PATH

# Set environment variable
ENV PYTHONUNBUFFERED 1

RUN mkdir -p ${OPENPILOT_PATH}
# WORKDIR ${OPENPILOT_PATH}

COPY SConstruct ${OPENPILOT_PATH}

COPY ./openpilot ${OPENPILOT_PATH}/openpilot
COPY ./third_party ${OPENPILOT_PATH}/third_party
COPY ./site_scons ${OPENPILOT_PATH}/site_scons
COPY ./rednose ${OPENPILOT_PATH}/rednose
COPY ./rednose_repo/site_scons ${OPENPILOT_PATH}/rednose_repo/site_scons
COPY ./tools ${OPENPILOT_PATH}/tools
COPY ./release ${OPENPILOT_PATH}/release
COPY ./common ${OPENPILOT_PATH}/common
COPY ./opendbc ${OPENPILOT_PATH}/opendbc
COPY ./cereal ${OPENPILOT_PATH}/cereal
COPY ./panda ${OPENPILOT_PATH}/panda
COPY ./selfdrive ${OPENPILOT_PATH}/selfdrive
COPY ./system ${OPENPILOT_PATH}/system
COPY ./body ${OPENPILOT_PATH}/body

# Copy the entire project to a temporary directory for building
# COPY . ${OPENPILOT_PATH}

WORKDIR ${OPENPILOT_PATH}

# RUN /bin/bash -c "scons -j$(nproc) > /dev/null"

RUN scons --cache-readonly -j$(nproc) > /dev/null

FROM python:3.11

ARG OPENPILOT_PATH

WORKDIR ${OPENPILOT_PATH}

COPY --from=builder ${OPENPILOT_PATH} .
COPY --from=builder /tmp/pyproject.toml /tmp/poetry.lock /tmp/.python-version ./

# Don't buffer `stdout`:
ENV PYTHONUNBUFFERED=1
# Don't create `.pyc` files:
ENV PYTHONDONTWRITEBYTECODE=1

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    autoconf \
    python3-pyaudio \
    portaudio19-dev \
    libssl-dev \
    libzmq3-dev && \
    rm -rf /var/lib/apt/lists/*

RUN python3 -m pip install --upgrade pip && \
    pip install poetry==1.6.1 && \
    poetry config virtualenvs.create false && \
    poetry install --only main

# RUN apk add --no-cache bash


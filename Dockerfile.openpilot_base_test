# Stage 1: Build environment
FROM ubuntu:20.04 as builder

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies required by pyenv, Poetry, and general build processes
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    wget \
    llvm \
    libncurses5-dev \
    libncursesw5-dev \
    xz-utils \
    tk-dev \
    libffi-dev \
    liblzma-dev \
    python-openssl \
    git \
 && rm -rf /var/lib/apt/lists/*

# Install pyenv
RUN curl https://pyenv.run | bash

# Set environment variables for pyenv
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="/root/.pyenv/bin:/root/.pyenv/shims:$PATH"
SHELL ["/bin/bash", "-c"]

# Copy the .python-version file to specify Python version
COPY .python-version /tmp/

# Install Python version specified in your .python-version file and set it as global
RUN pyenv install $(cat /tmp/.python-version)
RUN pyenv global $(cat /tmp/.python-version)

# Install Poetry
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
ENV POETRY_HOME="/root/.poetry" \
    PATH="/root/.poetry/bin:$PATH"

# Configure Poetry to not create virtual environments as we're using pyenv for that
RUN poetry config virtualenvs.create false

# Stage 2: Runtime environment
FROM ubuntu:20.04 as runtime

# Copy pyenv and Poetry installations from the builder
COPY --from=builder /root/.pyenv /root/.pyenv
COPY --from=builder /root/.poetry /root/.poetry

# Set environment variables to include pyenv and Poetry in the PATH
ENV PYENV_ROOT="/root/.pyenv" \
    PATH="/root/.pyenv/bin:/root/.pyenv/shims:/root/.poetry/bin:$PATH"

# Set work directory
WORKDIR /app

# The Docker container starts with a shell ready to run applications in the prepared environment
CMD ["/bin/bash"]
